using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

namespace MyGameProject
{
    public class ShopPanel : MonoBehaviour
    {
        [SerializeField]
        private GameObject shopPanel;

        private ActiveState shopState;
        public CurrentSkinDataInShop CurrentSkinForView { get; set; }

        [SerializeField]
        private Text currentSkinName;
        [SerializeField]
        private Text currentSkinDescription;
        [SerializeField]
        private Image currentSkinImage;
        [SerializeField]
        private Image currentSkinImageBorder;
        [SerializeField]
        private Text currentSkinPrice;
        [SerializeField]
        private Text currentSkinRarity;
        [SerializeField]
        private Text buyButtonText;

        private SkinManager skinManager;

        private List<Skin> currentSkinList; // Универсальный список для текущей категории скинов
        private IReadOnlyList<PlayerSkin> playerSkinList;
        private IReadOnlyList<WeaponSkin> weaponSkinList;

        private bool showingPlayerSkins = true; // Показываем скины персонажа по умолчанию

        private void Start()
        {
            shopPanel.SetActive(false);
            shopState = ActiveState.OFF;

            // Получаем ссылку на SkinManager
            skinManager = FindObjectOfType<SkinManager>();

            if (skinManager == null)
            {
                Debug.LogError("SkinManager not found in the scene.");
                return;
            }

            // Загружаем списки скинов
            playerSkinList = skinManager.GetPlayerSkins();
            weaponSkinList = skinManager.GetWeaponSkins();

            if (playerSkinList.Count == 0 && weaponSkinList.Count == 0)
            {
                Debug.LogError("No skins available in SkinManager.");
                return;
            }

            // По умолчанию показываем список скинов персонажа
            SwitchToPlayerSkins();
        }

        public void ToggleShopPanel()
        {
            if (!IsShopActive())
            {
                SetShopActive(true);
                shopState = ActiveState.ON;
                Debug.Log("Menu turned ON");
            }
            else
            {
                SetShopActive(false);
                shopState = ActiveState.OFF;
                Debug.Log("Menu turned OFF");
            }
        }

        public bool IsShopActive()
        {
            return shopState == ActiveState.ON;
        }

        public void SetShopActive(bool isActive)
        {
            shopPanel.SetActive(isActive);
        }

        public void SetShopCurrentSkin(int index)
        {
            if (index < 0 || index >= currentSkinList.Count)
            {
                Debug.LogError("Invalid skin index.");
                return;
            }

            var selectedSkin = currentSkinList[index];
            UpdateSkinUI(selectedSkin);
        }

        private void UpdateSkinUI(Skin skin)
        {
            CurrentSkinForView = new CurrentSkinDataInShop(currentSkinList.IndexOf(skin), skin);

            currentSkinName.text = skin.Name;
            currentSkinDescription.text = skin.Description;
            currentSkinImage.sprite = skin.SkinSprite;
            currentSkinPrice.text = skin.Price.ToString();
            currentSkinRarity.text = skin.RarityLevel.ToString();

            currentSkinImageBorder.color = GetRarityColor(skin.RarityLevel);
            buyButtonText.text = skin.Access == Accesses.UNLOCKED ? "Apply" : "Buy";
        }

        private Color GetRarityColor(Rarity rarity)
        {
            return rarity switch
            {
                Rarity.COMMON => new Color(144f / 255f, 255f / 255f, 255f / 255f),
                Rarity.UNCOMMON => new Color(144f / 255f, 255f / 255f, 165f / 255f),
                Rarity.RARE => new Color(171f / 255f, 111f / 255f, 255f / 255f),
                Rarity.EPIC => new Color(242f / 255f, 255f / 255f, 111f / 255f),
                Rarity.LEGENDARY => new Color(242f / 255f, 132f / 255f, 89f / 255f),
                Rarity.MYTHICAL => Color.red,
                _ => Color.white,
            };
        }

        public void OnClickButtonNext()
        {
            CurrentSkinForView.Index = (CurrentSkinForView.Index + 1) % currentSkinList.Count;
            SetShopCurrentSkin(CurrentSkinForView.Index);
        }

        public void OnClickButtonPrevious()
        {
            CurrentSkinForView.Index = (CurrentSkinForView.Index - 1 + currentSkinList.Count) % currentSkinList.Count;
            SetShopCurrentSkin(CurrentSkinForView.Index);
        }

        public void OnClickButtonBuy()
        {
            var currentSkin = CurrentSkinForView.Skin;

            if (currentSkin.Access == Accesses.UNLOCKED)
            {
                skinManager.ApplySkin(currentSkin);
            }
            else
            {
                skinManager.UnlockSkin(currentSkin);
                buyButtonText.text = "Apply";
            }
        }

        public void OnClickPlayerSkin()
        {
            SwitchToPlayerSkins();
        }

        public void OnClickWeaponSkin()
        {
            SwitchToWeaponSkins();
        }

        private void SwitchToPlayerSkins()
        {
            showingPlayerSkins = true;
            currentSkinList = new List<Skin>(playerSkinList); // Приводим к базовому типу Skin
            CurrentSkinForView = new CurrentSkinDataInShop(0, currentSkinList[0]);
            SetShopCurrentSkin(0);
            Debug.Log("Switched to Player Skins");
        }

        private void SwitchToWeaponSkins()
        {
            showingPlayerSkins = false;
            currentSkinList = new List<Skin>(weaponSkinList); // Приводим к базовому типу Skin
            CurrentSkinForView = new CurrentSkinDataInShop(0, currentSkinList[0]);
            SetShopCurrentSkin(0);
            Debug.Log("Switched to Weapon Skins");
        }

        public class CurrentSkinDataInShop
        {
            public int Index { get; set; }
            public Skin Skin { get; set; }

            public CurrentSkinDataInShop(int index, Skin skin)
            {
                Index = index;
                Skin = skin;
            }
        }
    }
}